function F = light
    F.light = @light;
   
end

function light(root, sats1, starttime, endtime, timestep, file_path)
    % 输入验证
    if nargin < 6
        error('必须提供 root, 卫星名称, 起止时间, 时间步长和文件路径.');
    end
    if nargin < 7
        line = false; % 默认不截断数据
    end

    % 获取卫星对象
    satellite1 = root.GetObjectFromPath(['Satellite/' sats1]);
    
    % 查询位置数据
   % position = satellite1.DataProviders.Item('Vectors(J2000)').Group.Item('Position').Exec(starttime, endtime, timestep);
        lighting_data_provider = satellite1.DataProviders.Item('Lighting Times').Group.Item('Sunlight')
        
 
t = {'Start Time'}
        
        % 获取 Lighting Times 数据
lighting_start_time = lighting_data_provider.ExecElements( starttime, endtime,t);

test =  lighting_times.DataSets

lighting_start_time = lighting_times.DataSets.GetDataSetByName('Start Time').GetValues;



lighting_end_time = lighting_times.DataSets.GetDataSetByName('Stop Time').GetValues;

lighting_duration = lighting_times.DataSets.GetDataSetByName('Duration').GetValues;


% 获取每个光照事件的类型
lighting_type = lighting_times.DataSets.GetDataSetByName('LightingType').GetValues;

% 将光照事件数据转化为表格形式
lighting_table = table(lighting_start_time, lighting_end_time, lighting_type, 'VariableNames', {'StartTime', 'EndTime', 'LightingType'});

% 显示数据
disp(lighting_table);



%         .Exec(starttime, endtime, timestep);

    % 提取数据列（确保为列向量）
    position_x = position.DataSets.GetDataSetByName('x').GetValues;
    position_y = position.DataSets.GetDataSetByName('y').GetValues;
    position_z = position.DataSets.GetDataSetByName('z').GetValues;
    position_time = position.DataSets.GetDataSetByName('Time').GetValues;
    
    % 确保数据为列向量（若返回元胞数组则转换）
    if iscell(position_time)
        position_time = cell2mat(position_time);
        position_x = cell2mat(position_x);
        position_y = cell2mat(position_y);
        position_z = cell2mat(position_z);
    end
    
    % 创建表格
    data_table = table(position_time, position_x, position_y, position_z, ...
        'VariableNames', {'Time', 'x', 'y', 'z'});
    
    % 处理数据截断
    if line
        if height(data_table) >= line
            selected_data = data_table(1:line, :);
            writetable(selected_data, file_path, 'Delimiter', '\t');
        else
            error('数据不足2000行，当前行数：%d', height(data_table));
        end
    else
        writetable(data_table, file_path, 'Delimiter', '\t');
    end
end
